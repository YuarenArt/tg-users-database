basePath: /
definitions:
  db.Subscription:
    properties:
      duration:
        description: month, year, forever
        type: string
      end_subscription:
        type: string
      id:
        type: integer
      start_subscription:
        type: string
      subscription_status:
        description: active, inactive
        type: string
    type: object
  db.User:
    properties:
      chat_id:
        type: integer
      subscription:
        $ref: '#/definitions/db.Subscription'
      traffic:
        type: number
      username:
        type: string
    type: object
  handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handler.SuccessResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8082
info:
  contact: {}
  description: This is a sample server for managing user subscriptions over HTTPS.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: user Database API
  version: "2.2"
paths:
  /users:
    post:
      consumes:
      - application/json
      description: Create a new User with the provided details
      parameters:
      - description: User details
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/db.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new User
      tags:
      - users
  /users/{username}:
    delete:
      description: Delete a User by their username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a User by username
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get User details by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a User by username
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the subscription status of a User by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Updated User details
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/db.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a User's subscription status
      tags:
      - users
  /users/{username}/exists:
    get:
      description: Check if a User exists by their username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User exists or not
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - Bearer: []
      summary: Check if a User exists by username
      tags:
      - users
  /users/{username}/subscription:
    get:
      description: Get the subscription status of a User by their username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Subscription status
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - Bearer: []
      summary: Get subscription status of a User by username
      tags:
      - users
  /users/{username}/traffic:
    put:
      consumes:
      - application/json
      description: Update the traffic used by a User identified by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Traffic used in MB
        in: body
        name: traffic
        required: true
        schema:
          type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - Bearer: []
      summary: Update the amount of traffic used by a User
      tags:
      - users
schemes:
- https
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
